# -*- coding: utf-8 -*-
"""Notebook 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CYai993aQDmQsh13wsZCTrVAjg9i3BDT

## Programa Ingenias+ Data Science

## Trabajando con Pandas

1) Importa las librerias requeridas: `Pandas` y `NumPy`.  

Una buena practica a la hora de escribir codigo es de comentar siempre que estoy haciendo (usando `#`) en la linea anterior. Por mas obvio que parezca lo que voy a hacer, puede ser que tenga que compartir el documento con otras personas y no sepan que quise hacer en cada linea. O que yo mismo lea el codigo tiempo despues y no recuerde porque lo hice.
"""

import pandas as pd
import numpy as np

"""2) Lee el archivo csv `life_expectancy_data` usando `pandas`. Guardalo en una variable llamada `expvida`."""

# Leo los datos en un DataFrame
from google.colab import files

from google.colab import drive
drive.mount("/content/drive")

df = pd.read_csv("/content/drive/MyDrive/data_science/life_expectancy_data.csv")
df.shape

df.dtypes
print('\nLos datos son de tipos:\n', df.dtypes)

df.head(1000)

"""3) ¿Que tipo de estructura de datos contiene la variable `expvida`?"""

# Obtengo el tipo de estructura de datos
type(df)

"""4) ¿Cuantas filas y columnas tiene `expvida`?"""

# Uso .shape para obtener cantidad de filas y columnas
df = pd.read_csv("/content/drive/MyDrive/data_science/life_expectancy_data.csv")
df.shape

"""5) ¿Cual es el nombre de las columnas contenidas en `expvida`?"""

# Obtengo el nombre de las columnas
nombres_columnas = df.columns
print("Nombre de columnas:", nombres_columnas)

"""6) Inspecciona las primeras 10 filas de `expvida`"""

# Inspecciono las primeras filas
df.head(10)

"""7) Y ahora las 10 ultimas."""

# Inspecciono las ultimas filas
df.tail(10)

"""8) ¿Que tipos de datos contiene cada una de las columnas de `expvida`?"""

# Tipo de datos en cada columna
df.dtypes

"""9) ¿Hay valores faltantes en alguna de las columnas de `expvida`?"""

# Obtengo la cantidad de datos faltantes en cada columna -
expvida = pd.read_csv("/content/drive/MyDrive/data_science/life_expectancy_data.csv")
datos_faltantes_por_columna = expvida.isnull().sum()
print(datos_faltantes_por_columna)

"""10) Selecciona el maximo de datos faltantes. Calcula que porcentaje de los datos representan los datos faltantes."""

# Obtengo el maximo valor de datos faltantes y lo guardo en la variable masnan
datos_faltantes_por_columna = expvida.isnull().sum()
masnan = datos_faltantes_por_columna.max()
porcentaje_datos_faltantes = (masnan / len(expvida)) * 100
print("Máximo valor de datos faltantes:", masnan)
print("Porcentaje de datos faltantes: {:.2f}%".format(porcentaje_datos_faltantes)) #para mostrar el resultado del porcentaje con dos decimales: {:.2f}%



# Obtengo la cantidad de filas total y divido el maximo valor de datos faltantes por este numero
# y lo multiplico por 100
total_filas = expvida.shape[0]
porcentaje_datos_faltantes = (masnan / total_filas) * 100
print("Máximo valor de datos faltantes:", masnan)
print("Porcentaje de datos faltantes: {:.2f}%".format(porcentaje_datos_faltantes))

# Imprimo el maximo porcentaje de datos faltantes. Uso f-strings.
porcentaje_datos_faltantes = (masnan / total_filas) * 100
print(f"Máximo valor de datos faltantes: {masnan}")
print(f"Porcentaje de datos faltantes: {porcentaje_datos_faltantes:.2f}%")

"""- str.format()
- Template Class
- f-strings

#### Ahora vamos a realizar algunos calculos y manipulaciones sobre las columnas.

Una función útil para este fin es: `.rename()`. Y podemos utilizarla de la siguiente manera: Si `df` es mi DataFrame y quiero renombrar la columna `columna` como `columna1`, y la columna `columna2` como `columna3`, utilizo la siguiente sintaxis:
  
`df.rename(columns={"columna": "columna1", "columna2": "columna3"}, inplace=True)`

11) Renombra la columna 'Life expectancy ' como 'life_expectancy', ' BMI ' como 'bmi' y ''Measles ' como 'measles'. No olvides de usar `inplace` para modificar el DataFrame original. Luego chequea que el cambio se haya hecho correctamente.
"""

# Renombro columnas del DataFrame
expvida.rename(columns={"Life expectancy ": "life_expectancy", " BMI ": "bmi", "Measles ": "measles"}, inplace=True)
print(expvida.head())

# Chequeo que se hayan reemplazado correctamente
print("Nombres de las columnas después de renombrar:")
print(expvida.columns)

"""12) ¿Cual es el promedio de expectativa de vida (Life expectancy) en general?"""

# Obtengo el promedio de la columna
expvida = pd.read_csv("/content/drive/MyDrive/data_science/life_expectancy_data.csv")
promedio_vida = expvida['Life expectancy '].mean()
print("Promedio de expectativa de vida (Life expectancy):", promedio_vida)

"""13) ¿Cual es el promedio de expectativa de vida (Life expectancy) por país?"""

# Obtengo el promedio por pais
promedio_vida_por_pais = expvida.groupby('Country')['Life expectancy '].mean()
print(promedio_vida_por_pais)

"""14) ¿Cual es la expectativa de vida mas alta y mas baja? Usa la funcion de pandas y la funcion de NumPy y compara el resultado. ¿Que paises tienen esas expectativas de vida?"""

# Maxima expectativa de vida usando numpy
max_vida_numpy = np.max(expvida['Life expectancy '])
print("Expectativa de vida más alta (usando NumPy):", max_vida_numpy, "País:", expvida.loc[expvida['Life expectancy '] == max_vida_numpy, 'Country'].iloc[0])

# Maxima expectativa de vida usando pandas
expvida = pd.read_csv("/content/drive/MyDrive/data_science/life_expectancy_data.csv")
max_vida_pandas = expvida['Life expectancy '].max()
pais_vida_max = expvida.loc[expvida['Life expectancy '] == max_vida_pandas, 'Country'].iloc[0]
print("Expectativa de vida más alta (usando pandas):", max_vida_pandas, "País:", pais_vida_max)

"""iloc es un atributo de los DataFrames en pandas que se utiliza para acceder a los datos basándose en su posición numérica en lugar de utilizar etiquetas o nombres."""

# Minima expectativa de vida usando numpy
min_vida_numpy = np.min(expvida['Life expectancy '])
print("Expectativa de vida más baja (usando NumPy):", min_vida_numpy, "País:", expvida.loc[expvida['Life expectancy '] == min_vida_numpy, 'Country'].iloc[0])

# Minima expectativa de vida usando pandas
min_vida_pandas = expvida['Life expectancy '].min()
pais_vida_min = expvida.loc[expvida['Life expectancy '] == min_vida_pandas, 'Country'].iloc[0]
print("Expectativa de vida más baja (usando pandas):", min_vida_pandas, "País:", pais_vida_min)

# Muestro los resultados maximos
expectativa_vida_maxima = expvida['Life expectancy '].max()
datos_maximos = expvida[expvida['Life expectancy '] == expectativa_vida_maxima]
print("Resultados Máximos:")
print(datos_maximos)

# Muestro los resultados minimos
expectativa_vida_minima = expvida['Life expectancy '].min()
datos_minimos = expvida[expvida['Life expectancy '] == expectativa_vida_minima]
print("Resultados Mínimos:")
print(datos_minimos)

# Filtro las columnas para mostrar solo las filas que tengan valor
# igual al maximo
expectativa_vida_maxima = expvida['Life expectancy '].max()
filas_maximas = expvida.loc[expvida['Life expectancy '] == expectativa_vida_maxima]
print("Filas con valor igual al máximo de expectativa de vida:")
print(filas_maximas)

# Filtro las columnas para mostrar solo las filas que tengan valor
# igual al minimo
expectativa_vida_minima = expvida['Life expectancy '].min()
filas_minimas = expvida.loc[expvida['Life expectancy '] == expectativa_vida_minima]
print("Filas con valor igual al mínimo de expectativa de vida:")
print(filas_minimas)

"""15) ¿Cuantas categorias encontramos en la columna "Status"? _**Pista**_: Lee acerca de la función [unique()](http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.unique.html?highlight=unique#pandas.Series.unique)"""

# Obtengo los valores unicos de la columna status
categorias_status = expvida['Status'].unique()
cantidad_categorias = len(categorias_status)
print("Cantidad de categorías en la columna 'Status':", cantidad_categorias)

"""16) ¿Cuantos paises se ubican en cada una de esas categorias de "Status"? _**Pista**_: Lee acerca de la función [value_counts()](http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.value_counts.html)"""

# Cuento cuantos valores hay de cada categoria
paises_por_status = expvida['Status'].value_counts()
print("Cantidad de países por categoría de 'Status':")
print(paises_por_status)

"""18) ¿Cuantos paises presentaron algun caso de Sarampion (**Measles**) en el 2015? **_Pista_**: Lee acerca de la función [.count()](http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.count.html?highlight=count#pandas.DataFrame.count)"""

# Cuento cuantas filas tienen valores distintos de cero
datos_2015 = expvida[expvida['Year'] == 2015]
paises_con_sarampion_2015 = datos_2015['Measles '].count()
print("Cantidad de países con casos de sarampión en el año 2015:", paises_con_sarampion_2015)

